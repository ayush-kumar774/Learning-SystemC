SystemC
--> Before We Start
----> Hardware Design
        1. Experience with an HDL(Hardware Designing Language) like Verilog.

--> What is SystemC ?
----> It is a library of C++ classes.
        Hardware aware
         1. Concurrency
         2. Bit accuracy
         3. Simulation time advancement

      
--> PORT I/O 
----> SystemC uses functions to read from sc_in<> and write to sc_out<>
        .read()
        .write()

        Examples
        1. If you add an input port inp and wanted to assign its value
           to a local variable x.
                x = inp.read();
        2. If you have a local variable called val and wanted to write its 
           value to an output port outP.
                outP.write(val);


--> Threads
----> A thread is a function made to act like a hardware process.
        1. Run concurrently
        2. Sensitive to signals, clock edges or fixed amounts of 
           simulation time.
        3. Not called by the user, always active.

----> SystemC supports three kinds of threads.
        1. SC_METHOD()
         -> Executes once every sensitivity event.
         -> Runs continuously.
         -> Analogous to a Verilog @always block
         -> Synthesizable
            --> Useful for combinational expressions or simple
                sequential logic like counter that can be done in one clock cycle.

        2. SC_THREAD()
         -> Runs once at start of simulation, then suspends itself when done.
         -> Can contain an infinite loop to execute code at a fixed rate of time.
         -> Similar to a Verilog @initial block
         -> NOT Synthesizable
           --> Useful in testbenches to describe clocks or initial 
               startup signal sequences.

        3. SC_CTHREAD() // Most suitable for high level designing
         -> Means "clocked thread"
         -> Runs continuously
         -> References a clock edge
         -> Synthesizable
         -> Can take one or more clock cycles to execute a single iteration.

-> SystemC Data Type

--> Integer Datatypes
----> SystemC has bit-accurate versions of the integer datatype 
        1. Datatypes have a fixed width
        2. Unlike C int type, it's size is always equal to your processor mostly (32 bits)
----> Unsigned and signed
        sc_uint<N> --> Unsigned
        sc_int<N>  --> signed
        where n is the bitwidth;
        sc_uint<3> x ; // Possible values will range from 0 to 7.
        sc_int<3> x ; // Possible values will range from -4 to 3.


-> MODULE SAMPLE 
              ______
             |      |
         a---| and2 |--- f
             |      |
         b---|      |
             |      |
       clk---|______|

      Let's Get Started
      #include <systemc.h>
      SC_MODULE ( and2 ) {
              //sc_in <DT> a ; // DT --> Data Type
              //sc_in <DT> b ; 
              //sc_out <DT> f ;

              sc_in < sc_uint<1> > a, b ;
              sc_out < sc_uint<1> > f ;
              sc_in <bool> clk ;// clock

              void func() {
                      f.write( a.read() & b.read() ) ;
              }

              SC_CTOR ( and2 ) {
                   // Constructor   
                   SC_METHOD ( func );
                   //sensitive << a << b ; // in systemC the left shift operator is overloaded to represent a list of sensitive signals or events 
                   //sensitive << clk.pos() ; // positive edge sensitive
                   sensitive << clk.neg() ; // negative edge sensitive
              }

      } // Everything between open and close braces become a real systemC module 